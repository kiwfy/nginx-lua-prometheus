worker_processes 1;

error_log logs/error.log warn;
pid logs/nginx.pid;

events {
    worker_connections 20000;
}

http {
    fastcgi_cache_path conf levels=1:2 keys_zone=microcache:10m max_size=1024m inactive=1h;
    include mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    map $http_user_agent $loggable {
        ~^[Prometheus]  0;
        default 1;
    }

    access_log logs/access.log main if=$loggable;

    sendfile on;

    keepalive_timeout 65;
    fastcgi_buffers 8 16k;
    fastcgi_buffer_size 32k;
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # Prometheus config
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/path/to/nginx-lua-prometheus/?.lua;;";

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter("nginx_http_requests_total", "Number of HTTP requests", {"status"})
        metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "HTTP request latency")
        metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})
        metric_uri_requests = prometheus:counter("nginx_http_uri_total", "Number of HTTP requests per URI", {"uri"})
        metric_uri_latency = prometheus:histogram("nginx_http_uri_latency", "HTTP request latency per URI", {"uri"})
    }

    log_by_lua_block {
        metric_requests:inc(1, {ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time))
        metric_uri_latency:observe(tonumber(ngx.var.request_time), {ngx.var.request_uri})
        metric_uri_requests:inc(1, {ngx.var.request_uri})
    }

    server {
        listen 9436;

        location /metrics {
            default_type text/html;

            content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            }
        }
    }
}
